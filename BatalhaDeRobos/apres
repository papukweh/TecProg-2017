#!/usr/bin/python3
import pygame as pg
import fileinput
import sys

from math import *

pg.init()                                 # inicialização do sistema
myfont = pg.font.SysFont("monospace", 16, bold=True) # setando a fonte
logfont = pg.font.SysFont("monospace", 12, bold=True) # fonte do log
sysfont = pg.font.SysFont("monospace", 54, bold=True) # fonte fim de jogo 
sys2font = pg.font.SysFont("monospace", 36, bold=True) # fonte vencedor

# boom = pg.mixer.Sound('Bomb2.wav')
# clink = pg.mixer.Sound('Bellring.wav')
# clank = pg.mixer.Sound('Bang.wav')

# altura e largura da arena, em células
H, W = 40,24
# Posições importantes:
#(1,0) e (18,11) = bases
#time1 = (0,0); (0,1); (2,0); (3,1); (3,0);
#time2 = (19, 11); (17,11); (16,11); (19, 10); (17,10)
#1260 x 770 = resolucao
# largura da célula
l = 25
# altura da célula
L = 2*l/sqrt(3)

# cria a janela
scr = pg.display.set_mode((int(1.5*W*L+0.7*l)+200, int(l*H/2 + 1.5*l)+150))
# só para simplificar, atualização da imagem
atu = pg.display.update

# pinta o fundo da janela
scr.fill((97,196,0))
atu()

def convert(i ,j):
    """
    Converte a coordenada (i,j) para a posição em pixels na janela
    """
    if i%2==0:
        x = (1+j)*L + 2*j*L
        y = l + i*l
    else:
        x = (2.5+j)*L + 2*j*L
        y = l + i*l
    return x,y

class Robô(pg.sprite.Sprite):
    """
    Representa um Robô, possui uma imagem
    """
    def __init__(s, img):
        """
        Construtor, img é o nome do arquivo com a imagem
        """
        pg.sprite.Sprite.__init__(s)
        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()

    def draw(s, i,j):
        """
        Desenha o robô na célula (i,j)
        """
        x, y = convert(i,j)

        # fronteiras do sprite
        l0,h0,l1,h1 = s.rect

        # corrije a posição de acordo com o tamanho do sprite
        s.rect.topleft = [x-l1/2,y-h1/2]
        # desenha
        scr.blit(s.image, s.rect)

class Cristal(pg.sprite.Sprite):
    """
    Representa um Cristal, possui uma imagem
    """
    def __init__(s, img):
        """
        Construtor, img é o nome do arquivo com a imagem
        """
        pg.sprite.Sprite.__init__(s)
        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()

    def draw(s, i,j):
        """
        Desenha o cristal na célula (i,j)
        """
        x, y = convert(i,j)

        # fronteiras do sprite
        l0,h0,l1,h1 = s.rect

        # corrije a posição de acordo com o tamanho do sprite
        s.rect.topleft = [x-l1/2,y-h1/2]
        # desenha
        scr.blit(s.image, s.rect)


class cell:
    """
    Representa uma das células da arena
    """
    def __init__(s,i,j,img):
        """
        Construtor, i e j formam a coordenada
        """
        pg.sprite.Sprite.__init__(s)
        s.image = pg.image.load(img)
        s.rect = s.image.get_rect()

        # Posição do centro
        s.cx, s.cy = convert(i,j)
        # Cor (pode ser passada para o construtor no futuro)
        s.cor = (0,0,0)

        # Vértices do hexágono
        s.pontos = (
            (s.cx-L/2,   s.cy-l),
            (s.cx+L/2, s.cy-l),
            (s.cx+L,   s.cy),
            (s.cx+L/2, s.cy+l),
            (s.cx-L/2, s.cy+l),
            (s.cx-L, s.cy),
            )

        #s.draw();

    def draw(s, i, j) :
        """
        Desenha a célula
        """
        pg.draw.polygon(scr, s.cor, s.pontos, 0)
        pg.draw.lines(scr, (0,0,0), True, s.pontos, 3)

        x, y = convert(i,j)

        # fronteiras do sprite
        l0,h0,l1,h1 = s.rect

        # corrije a posição de acordo com o tamanho do sprite
        s.rect.topleft = [x-l1/2,y-h1/2]
        # desenha
        scr.blit(s.image, s.rect)


# Variaveis usadas para representar o log
pos=0
IDG = [0,1,2,3,4,5]

LOG_TEXTOS = (  "[%d] se moveu" %IDG[0],#0
                "[%d] atacou [%d]" %(IDG[0],IDG[1]),#1 
                "[%d] recolheu cristal" %IDG[0],#2
                "[%d] depositou cristal" %IDG[0],#3
                "[%d] jogou um cristal" %IDG[0],#4
                "em [%d]" %IDG[1],#5  
                "[%d] se explodiu" %IDG[0], #6
                "[%d] ferido" %IDG[0],#7
                "[%d] e [%d] feridos" %(IDG[0],IDG[1]),#8
                "[%d], [%d] e [%d] feridos" %(IDG[0],IDG[1],IDG[2]),#9
                "[%d], [%d], [%d] e "%(IDG[0],IDG[1],IDG[2]),#10
                "[%d] feridos" %IDG[3],#11
                "[%d], [%d], [%d], [%d]" %(IDG[0],IDG[1],IDG[2],IDG[3]), #12 
                "e [%d] feridos" %IDG[4],#13
                "[%d], [%d], [%d], [%d]," %(IDG[0],IDG[1],IDG[2],IDG[3]), #14  
                "[%d] e [%d] feridos" %(IDG[4],IDG[5]),#15
                "[%d]  morreu" %IDG[0],#16
                "[%d] está incapacitado" %IDG[0]  )#17 


# Construção da matriz que representa a arena
arena = []
for i in range(int(H/2)):
    arena.append([])
    for j in range(int(W/2)):
        arena[i].append(cell(i,j, "hexbase.png"))
        arena[i][j].draw(i,j)

# Pega as dimensões da tela
wpx, hpx = pg.display.get_surface().get_size()
log_pos = [(wpx -180, 25)]

# Carrega algumas imagens da UI e define algumas labels
cris = Cristal("cris.png")
lotecris = Cristal("lotecris.png")
vida = pg.image.load("vida.png")
bigcris = pg.image.load("bigcris.png")
basea = pg.image.load("basea.png")
baseb= pg.image.load("baseb.png")
erase = pg.image.load("erase.png")
wrench = pg.image.load("wrench.png")
label = myfont.render("Base", 2, (0,0,0))
log = logfont.render((LOG_TEXTOS[9]), 2, (255,255,255))

# Define o retângulo cinza sobre o qual os elementos da UI serão desenhados
ui_cor = (100, 100, 100)
ui_pontos = ( (0, 4*hpx/5), (wpx, 4*hpx/5), (wpx, hpx), (0, hpx))
pg.draw.polygon(scr, ui_cor, ui_pontos, 0)

# Define o retângulo preto sobre o qual o log será impresso
log_cor = (0, 0, 0)
log_pontos = ( (wpx -10, hpx-10) , (wpx-190, hpx-10) , (wpx-190, 10), (wpx-10, 10) )
pg.draw.polygon(scr, log_cor, log_pontos, 0)

# Cria as posicoes possiveis pras mensagens do log
for i in range(1, 22):
    if i%2 == 0:
        log_pos.append((log_pos[i-1][0], log_pos[i-1][1] + 40))
    else:
        log_pos.append((log_pos[i-1][0], log_pos[i-1][1] + 20))

# Desenha as informações referentes às bases
scr.blit(label, (10, 4*hpx/5))
scr.blit(label, (1000, 4*hpx/5))
scr.blit(basea, (10, 4*hpx/5 + 65))
scr.blit(baseb, (wpx - 270, 4*hpx/5 + 65))
scr.blit(bigcris, (22.5, 4*hpx/5 + 25) )
scr.blit(bigcris, (wpx - 257.5, 4*hpx/5 + 25) )

# lista dos robôs definidos
robs = []

# atualiza a janela
atu()

# Leitura dos comandos pela entrada padrão ou de um arquivo
for line in fileinput.input():
    r = line.split()

    # linha começando com 'atu', atualiza a tela e faz uma breve pausa
    if r[0] == 'atu':
        atu()
        pg.time.wait(100)
        continue

    # linha começando com 'rob', inclui um robô,
    # o segundo argumento na linha é a imagem
    if r[0] == 'rob':
        robs.append(Robô(r[1]))

        # Cria labels para a id do robô, sua vida e o número de cristais
        label = myfont.render("Robô "+str((len(robs)-1)), 2, (0,0,0))
        life = myfont.render("   100", 2, (0,0,0))
        cristais = myfont.render("    0", 2, (0,0,0))

        # Desenha
        scr.blit(label, (len(robs)*90, 4*hpx/5))
        scr.blit(robs[len(robs)-1].image, (len(robs)*90, 4*hpx/5 + 25))
        scr.blit(life, (len(robs)*90, 4*hpx/5 + 70))
        scr.blit(vida, (len(robs)*90, 4*hpx/5 + 60))
        scr.blit(cristais, (len(robs)*90, 4*hpx/5 + 110))
        scr.blit(bigcris, (len(robs)*90, 4*hpx/5 + 100))
        pg.time.wait(30)
        continue

    # linha começando com 'UI_atu': atualiza os elementos da UI:
    if r[0] == 'UI_atu':
        idn, nvida, ncris, morte, base1, base2 = list(map(int, r[1:]))

        # Para não termos vida negativa
        if nvida <= 0:
            nvida = 0;

        # Define o retângulo branco que é desenhado por baixo do texto
        # Assim temos uma maneira de apagar o texto antes de atualizar
        ui_rectangle = (((1+idn)*90,4*hpx/5 + 25), ((1+idn)*90 + 70,4*hpx/5 + 25),
                        ((1+idn)*90 + 70, hpx-10 ), (((1+idn)*90, hpx-10)))
        bg_color = (255, 255, 255)
        pg.draw.polygon(scr, bg_color, ui_rectangle, 0)

        # Atualiza as labels correspondentes à vida, número de cristais
        # e estado de um robô
        life = myfont.render("   "+str(nvida), 2, (0,0,0))
        cristais = myfont.render("    "+str(ncris), 2, (0,0,0))
        estado = robs[idn].image

        # Se o robô estiver morto, deitar seu sprite
        if morte == 1:
            pg.transform.rotate(estado, 90)

        # Redesenha e reescreve tudo por cima do novo retângulo:
        base1 = myfont.render(str(base1), 2, (0,0,0))
        base2 = myfont.render(str(base2), 2, (0,0,0))
        scr.blit(estado, ((1+idn)*90, 4*hpx/5 + 25))
        scr.blit(life, ((1+idn)*90, 4*hpx/5 + 70))
        scr.blit(vida, ((1+idn)*90, 4*hpx/5 + 60))
        scr.blit(cristais, ((1+idn)*90, 4*hpx/5 + 110))
        scr.blit(bigcris, ((1+idn)*90, 4*hpx/5 + 100))
        scr.blit(basea, (10, 4*hpx/5 + 65))
        scr.blit(baseb, (wpx - 270, 4*hpx/5 + 65))
        scr.blit(base1, (32, 4*hpx/5 + 82.5))
        scr.blit(base2, (wpx - 247, 4*hpx/5 + 82.5))
        pg.time.wait(30)
        continue

    # escreve as acoes no log de acordo com os códigos recebidos
    if r[0] == 'log':
        if pos >= 22:
            pos = 0
        IDG[0], IDG[1], IDG[2], IDG[3], IDG[4], IDG[5], code1, code2 = list(map(int, r[1:]))
        towrite = LOG_TEXTOS[code1]

        # pertence ao time vermelho
        if IDG[0] > 4:
            cor = (200, 10, 10)
        # pertence ao time azul
        else:
            cor = (50, 50, 200)

        # troca os números pelos ids dos robôs em questão
        for i in range(5):
            if IDG[i] == -1:
                break
            towrite = towrite.replace(str(i), str(IDG[i]))

        # apaga a mensagem anterior e escreve
        log = logfont.render(towrite, 2, cor )
        scr.blit(erase, log_pos[pos])
        scr.blit(log, log_pos[pos])
        pos = pos+1
        if code2 >= 0:
            towrite = LOG_TEXTOS[code2]

            for i in range(5):
                if IDG[i] == -1:
                    break
                towrite = towrite.replace(str(i), str(IDG[i]))

            log = logfont.render(towrite, 2, cor )
            scr.blit(erase, log_pos[pos])
            scr.blit(log, log_pos[pos])

        # avança o ponteiro do log
        pos = pos+1
        continue

    # linha começando com 'morte': desenha o sprite do robô
    # "morto" deitado na arena
    if r[0] == 'morte':
        idn, i, j = list(map(int, r[1:]))
        arena[i][j].draw(i,j)
        dead = pg.transform.rotate(robs[idn].image, 90)
        robs[idn].image = dead
        robs[idn].draw(i, j)
        atu()
        continue

    # linha começando com 'ress': "ressucita" um robô morto
    # colocando seu sprite na orientação original
    if r[0] == 'ress':
        idn, i, j = list(map(int, r[1:]))
        arena[i][j].draw(i,j)
        back = pg.transform.rotate(robs[idn].image, 270)
        robs[idn].image = back
        robs[idn].draw(i, j)
        atu()
        continue

    # linha começando com 'terr': desenha o tile (i, j)
    # de acordo com o tipo de terreno
    if r[0] == 'terr':
        i, j, t = list(map(int, r[1:]))
        if t == 0:
            img = "grama.png"
        if t == 1:
            img = "estrada.png"
        if t == 2:
            img = "montanha.png"
        if t == 3:
            img = "agua.png"
        if t == 4:
            img = "areia.png"
        if t == 5:
            img = "basea.png"
        if t == 6:
            img = "baseb.png"

        arena[i][j] = cell(i,j,img)
        arena[i][j].draw(i,j)
        atu()
        continue

    # linha começando com 'cris': desenha um pequeno cristal
    # no tile (i,j) da arena
    if r[0] == 'cris':
        i, j = list(map(int, r[1:]))
        cris.draw(i, j)
        continue

    # linha começando com 'lotecris': desenha um pequeno lote
    # de cristais no tile (i,j) da arena
    if r[0] == 'lotecris' :
        i, j = list(map(int, r[1:]))
        lotecris.draw(i, j)
        continue

    # fim de jogo: imprime uma tela customizada para a vitória de cada time, assim
    # como empates
    if r[0] == 'fim':
        i = int(r[1])

        # mensagem genérica de fim de jogo
        fim = pg.image.load("fim.png")
        scr.blit(fim, (0,0))
        atu()
        text = sysfont.render("Fim de jogo!", 1, (255,255,255))
        scr.blit(text, (300, 50))
        atu()

        # cria a tela de vitória do time vermelho
        if i == 1:
            win = sys2font.render("O time vermelho venceu!", 1, (200, 10, 10))
            scr.blit(robs[5].image, (285, 250))
            scr.blit(robs[5].image, (385, 250))
            scr.blit(robs[5].image, (485, 250))
            scr.blit(robs[5].image, (585, 250))
            scr.blit(robs[5].image, (685, 250))
            scr.blit(basea, (475,300))
            scr.blit(lotecris.image, (492.5, 315))
            scr.blit(win, (250, 200))  

        # cria a tela de vitória do time azul          
        elif i == 2:
            win = sys2font.render("O time azul venceu!", 1, (50, 50, 200))
            scr.blit(robs[0].image, (285, 250))
            scr.blit(robs[0].image, (385, 250))
            scr.blit(robs[0].image, (485, 250))
            scr.blit(robs[0].image, (585, 250))
            scr.blit(robs[0].image, (685, 250))
            scr.blit(baseb, (475,300))
            scr.blit(lotecris.image, (492.5, 315))
            scr.blit(win, (250, 200))

        # cria a tela de empate
        else:
            win = sys2font.render("Empate!", 1, (0, 0, 0))
            scr.blit(basea, (420,300))
            scr.blit(robs[0].image, (430, 375))
            scr.blit(baseb, (520,300))
            scr.blit(robs[5].image, (530, 375))
            scr.blit(win, (432.5, 200))
        
        atu()
        pg.time.wait(5000)
        break

    # Tentativa de usar sons: scrapped pois ficava uma cacofonia
    # if r[0] == 'sfx':
    #     i  =  int(r[1])
    #     if i == 0:
    #         boom.play()
    #     if i == 1:
    #         clink.play()
    #     if i == 2:
    #         clank.play()
    #     continue

    # Tentativa de usar animações: scrapped pois precisava ficar apagando
    # if r[0] == 'anim':
    #     tipo, ids, i, j, newi, newj = list(map(int, r[1:]))
    #     if tipo == 0:
    #         weapon = wrench.copy()
    #         scr.blit(weapon, convert(i,j))
    #         for k in range(20):
    #             scr.blit(pg.transform.rotate(weapon, 90),  convert(i,j))
    #     if tipo == 2:
    #         break
    #     continue


    # linha de movimentação:
    # robô, corrdenadas originais, coordenadas finais
    ri, oi, oj, di, dj = list(map(int, r))

    # redesenha a célula original (apaga o robô)
    if 0 <= oi  < H/2 and 0 <= oj < W/2:
        arena[oi][oj].draw(oi, oj)
        atu()
    # desenha o robô na célula de destino
    if 0 <= di  < H/2 and 0 <= dj < W/2 and ri < len(robs):
        robs[ri].draw(di,dj)
        atu()

    # tempo de espera para atualização, apenas para testes
    #pg.time.wait(100)

pg.quit()

# Local variables:
# mode: python
# End:
